process.on("exit",()=>{console.log()}),process.env.NODE_ENV="production";const fs=require("fs-extra"),webpack=require("webpack"),merge=require("webpack-merge"),del=require("del"),utils=require("../lib/util/util"),basePageWebpackConfig=require("../config/page.webpack.config"),baseAppConfig=require("../config/app.webpack.config"),cwd=process.cwd(),clean=async()=>{await del([`${cwd}/dist/mp/*`,`!${cwd}/dist/mp/miniprogram_npm`,`!${cwd}/dist/mp/package.json`])},getCustomConfig=async()=>{let a;const b=`${cwd}/tc.config.js`,c=await fs.pathExists(b);if(c){let c=require(b);a=merge(basePageWebpackConfig,c),a.plugins.push(new webpack.NoEmitOnErrorsPlugin,new webpack.NamedModulesPlugin),a.stats="errors-only"}else a=basePageWebpackConfig;return a},pack=async(a,b)=>new Promise((c,d)=>{webpack(a,(a,e)=>{if(a)d(a.stack||a);else if(e.hasErrors()){let a="";e.toString({colors:!0,modules:!1,children:!1,chunks:!1,chunkModules:!1}).split(/\r?\n/).forEach(b=>{a+=`    ${b}\n`}),d(a)}else utils.logStats(b,e),c()})}),build=async()=>{utils.clearConsole("TC MinApp \u5F00\u59CB\u7F16\u8BD1\u7EBF\u4E0A\u73AF\u5883...\n");const a=await getCustomConfig();await clean(),await pack(a,"page"),await pack(baseAppConfig,"app.js")};module.exports=(...a)=>{build(...a).catch(a=>{console.error(a),process.exit(1)}).then(()=>{utils.successLog(),process.exit(0)})};