const chalk=require("chalk"),readline=require("readline"),padStart=require("string.prototype.padstart"),EventEmitter=require("events");exports.events=new EventEmitter;function _log(a,b,c){c&&exports.events.emit("log",{message:c,type:a,tag:b})}const format=(a,b)=>b.split("\n").map((b,c)=>0===c?`${a} ${b}`:padStart(b,chalk.reset(a).length)).join("\n"),chalkTag=a=>chalk.bgBlackBright.white.dim(` ${a} `);exports.log=(a="",b=null)=>{b?console.log(format(chalkTag(b),a)):console.log(a),_log("log",b,a)},exports.info=(a,b=null)=>{console.log(format(chalk.bgBlue.white(" INFO ")+(b?chalkTag(b):""),a)),_log("info",b,a)},exports.done=(a,b=null)=>{console.log(format(chalk.bgGreen.white(" DONE ")+(b?chalkTag(b):""),a)),_log("done",b,a)},exports.warn=(a,b=null)=>{console.warn(format(chalk.bgYellow.white(" WARN ")+(b?chalkTag(b):""),chalk.yellow(a))),_log("warn",b,a)},exports.error=(a,b=null)=>{console.error(format(chalk.bgRed(" ERROR ")+(b?chalkTag(b):""),chalk.red(a))),_log("error",b,a),a instanceof Error&&(console.error(a.stack),_log("error",b,a.stack))},exports.clearConsole=a=>{if(process.stdout.isTTY){const b="\n".repeat(process.stdout.rows);console.log(b),readline.cursorTo(process.stdout,0,0),readline.clearScreenDown(process.stdout),a&&console.log(a)}};