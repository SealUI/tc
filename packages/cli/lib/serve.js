process.on("exit",()=>{console.log()});// process.env.NODE_ENV = 'development'
const fs=require("fs-extra"),webpack=require("webpack"),merge=require("webpack-merge"),chalk=require("chalk"),basePageWebpackConfig=require("../config/page.webpack.config"),baseAppConfig=require("../config/app.webpack.config"),utils=require("../lib/util/util"),cwd=process.cwd(),getCustomConfig=async()=>{let a;const b=`${cwd}/tc.config.js`,c=await fs.pathExists(b);if(c){let c=require(b);a=merge(basePageWebpackConfig,c),a.plugins.push(new webpack.NoEmitOnErrorsPlugin,new webpack.NamedModulesPlugin),a.stats="errors-only"}else a=basePageWebpackConfig;return a},startServe=async(a,b)=>new Promise((c,d)=>{const e=webpack(a);e.watch({},(a,e)=>{a&&d(a),utils.logStats(b,e),c()})}),serve=async()=>{const a=await getCustomConfig();return await startServe(a,"page"),await startServe(baseAppConfig,"app.js"),"success"};module.exports=(...a)=>{serve(...a).catch(a=>{console.error(a),process.exit(1)}).then(()=>{utils.clearConsole("TC MinApp \u5F00\u59CB\u7F16\u8BD1\u5F00\u53D1\u73AF\u5883...\n"),console.log(chalk.green("\n  \u2714 \u7F16\u8BD1\u5B8C\u6210. \u8BF7\u5728\u5FAE\u4FE1\u5F00\u53D1\u8005\u5DE5\u5177\u4E2D\u9884\u89C8.\n  \u6587\u4EF6\u76D1\u542C\u4E2D..."))})};